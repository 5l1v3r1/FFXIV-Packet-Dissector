
const fs = require('fs')
let files = fs.readdirSync('./js')

const snakeCase = name => name.replace(/\s*([A-Z]+)/g, (m0, m1, index) => `${index ? '_' : ''}${m1.toLowerCase()}`)
const tvbMethod = function (type) {
  if (type.startsWith('uint') && type !== 'uint64') {
    return 'uint'
  }

  return type
}

const generateLuaDissector = function (name, obj) {
  if (!obj.structs.length) return ''
  let requireDB = false
  let fields = obj.structs[0].fields
  fields.forEach(item => {
    item.key = snakeCase(item.name)
    if (item.enum) {
      if (item.enum.startsWith('$')) {
        item.enum = item.enum.replace('$', 'db.')
        requireDB = true
      } else {
        item.enum = snakeCase(item.enum) + '_valstr'
      }
    }
  })

  let maxLength = fields.reduce((max, item) => Math.max(max, item.key.length), 0)
  return `-- This file is generated by tools/json2lua.js
${requireDB ? `
local db = require('ffxiv_db')` : ''}
local ffxiv_ipc_${name} = Proto("ffxiv_ipc_${name}", "FFXIV-IPC ${obj.name}")
${obj.enums.length ? `
local function makeValString(enumTable)
  local t = {}
  for name,num in pairs(enumTable) do
      t[num] = name
  end
  return t
end
${obj.enums.map(item => `
local ${snakeCase(item.name)} = {${item.values.map(({ key, value }) => `
  ${key} = ${value},`).join('')}
}`).join('\n')}
${obj.enums.map(item => `
local ${snakeCase(item.name)}_valstr = makeValString(${snakeCase(item.name)})`).join('')}
` : ''}
local ${name}_fields = {${fields.map(item => `
  ${item.key}${' '.repeat(maxLength - item.key.length)} = ProtoField.uint32("ffxiv_ipc_${name}.${
  item.key}", "${item.name}", base.${item.base || 'DEC'}${item.enum ? `, ${item.enum}` : ''}),`).join('')}
}

ffxiv_ipc_${name}.fields = ${name}_fields

function ffxiv_ipc_${name}.dissector(tvbuf, pktinfo, root)
  local tree = root:add(ffxiv_ipc_${name}, tvbuf)
${obj.structs[0].fields.map(item => `
  -- dissect the ${item.key} field
  local ${item.key}_tvbr = tvbuf:range(${item.offset}, ${item.length})
  local ${item.key}_val  = ${item.key}_tvbr:le_${tvbMethod(item.type)}()
  tree:add_le(${name}_fields.${item.key}, ${item.key}_tvbr)
`).join('')}

  pktinfo.cols.info:set("${obj.name}")
  return tvbuf:len()
end`
}

const names = []

for (let file of files) {
  const obj = JSON.parse(fs.readFileSync('./js/' + file))
  const name = snakeCase(obj.name || file.replace('.json', ''))

  if (obj.name) {
    names.push(obj.name)
  }

  fs.writeFileSync(`../src/ffxiv_ipc_${name}_gen.lua`, generateLuaDissector(name, obj))
}

console.log(names.map(name => `if type_val == ipc_type.${name} then
  Dissector.get('ffxiv_ipc_${snakeCase(name)}'):call(tvb, pktinfo, root)
else`).join(''))
